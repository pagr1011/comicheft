' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package security.auth {
  class "type Role = 'ADMIN' | 'MITARBEITER' | 'KUNDE'" as Role
  hide Role circle

  class "@Roles" as Roles
  hide Roles circle

  Roles .right.> Role
}

package comicheft #DDDDDD {
  package entity #FFFFFF {
    class Comicheft <<entity>>
  }

  package service #FFFFFF {
    class ComicheftWriteService << control >>
  }

  class "type ComicheftDTO = Omit<Comicheft, 'abbildungen' | 'aktualisiert' | 'erzeugt'" as ComicheftDTO
  hide ComicheftDTO circle

    interface IdInput {
        id: number
    }

  class ComicheftMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() comicheftDTO: ComicheftDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() comicheftDTO: ComicheftDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  ComicheftMutationResolver o-down-> "1" ComicheftWriteService : service

  ComicheftMutationResolver ..> Comicheft
  ComicheftMutationResolver ..> ComicheftDTO
  ComicheftMutationResolver ..> IdInput
  ComicheftDTO .up.> Comicheft
  ComicheftMutationResolver ..> Promise
  ComicheftMutationResolver ..> Resolver

  ComicheftMutationResolver .up.> Roles
  ComicheftMutationResolver .up.> Role

  ComicheftDTO .[hidden].> Promise
  ComicheftDTO .[hidden].> Resolver
}

hide empty members
@enduml
