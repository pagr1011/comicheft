' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/common {
  class "@Controller" as Controller
  hide Controller circle

  class "@Get" as Get
  hide Get circle

  class "@Req" as Req
  hide Req circle

  class "@Res" as Res
  hide Res circle

  class "@Param" as Param
  hide Param circle

  class "@Query" as Query
  hide Query circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle
}

package express {
  class Request
  class Response

  Response .[hidden].> Controller
}

package comicheft {
  package entity #FFFFFF {
    class Comicheft <<entity>>

    Comicheft .[hidden].> Promise
    Comicheft .[hidden].> Request
  }

  package service {
    class ComicheftReadService << control >>
  }

  package rest #DDDDDD {
    ComicheftQuery -up-|> Comicheft

    class ComicheftGetController << control >> << @Controller() >> << @UseGuards() >> << @UseInterceptors() >> {
      + @Get() async findById(@Param() id: number, @Req() req: Request, @Headers() version: string, @Res() res: Response): Promise<Response<ComicheftModel | undefined>>
      + @Get() async find(@Query() query: ComicheftQuery, @Req() req: Request,  @Res() res: Response): Promise<Response<ComichefteModel | undefined>>
    }

    ComicheftGetController o--> "1" ComicheftReadService : service

    ComicheftGetController ..> Controller
    ComicheftGetController ..> Request
    ComicheftGetController ..> Response
    ComicheftGetController ..> Promise
    ComicheftGetController .up.> ComicheftModel
    ComicheftGetController .up.> ComicheftQuery

    ComicheftReadService .[hidden].> Request
    ComicheftReadService .[hidden].> Promise
    Response .right[hidden].> Controller
  }
}

hide empty members

@enduml
